<?xml version="1.0" encoding="UTF-8"?>
<project name="zeninitie" default="all">


    <!-- Uncomment the following property if no tests compilation is needed -->
    <!--
    <property name="skip.tests" value="true"/>
     -->

    <!-- Compiler options -->

    <property name="compiler.debug" value="on"/>
    <property name="compiler.generate.no.warnings" value="off"/>
    <property name="compiler.args" value=""/>
    <property name="compiler.max.memory" value="700m"/>
    <patternset id="ignored.files">
        <exclude name="**/*.hprof/**"/>
        <exclude name="**/*.pyc/**"/>
        <exclude name="**/*.pyo/**"/>
        <exclude name="**/*.rbc/**"/>
        <exclude name="**/*.yarb/**"/>
        <exclude name="**/*~/**"/>
        <exclude name="**/.DS_Store/**"/>
        <exclude name="**/.git/**"/>
        <exclude name="**/.hg/**"/>
        <exclude name="**/.svn/**"/>
        <exclude name="**/CVS/**"/>
        <exclude name="**/__pycache__/**"/>
        <exclude name="**/_svn/**"/>
        <exclude name="**/vssver.scc/**"/>
        <exclude name="**/vssver2.scc/**"/>
    </patternset>
    <patternset id="library.patterns">
        <include name="*.egg"/>
        <include name="*.jar"/>
        <include name="*.ear"/>
        <include name="*.klib"/>
        <include name="*.swc"/>
        <include name="*.war"/>
        <include name="*.ane"/>
        <include name="*.zip"/>
    </patternset>
    <patternset id="compiler.resources">
        <exclude name="**/?*.java"/>
        <exclude name="**/?*.form"/>
        <exclude name="**/?*.class"/>
        <exclude name="**/?*.groovy"/>
        <exclude name="**/?*.scala"/>
        <exclude name="**/?*.flex"/>
        <exclude name="**/?*.kt"/>
        <exclude name="**/?*.clj"/>
        <exclude name="**/?*.aj"/>
    </patternset>


    <!-- Project Libraries -->

    <path id="library.libs.classpath">
        <fileset dir="${basedir}/libs">
            <patternset refid="library.patterns"/>
        </fileset>
    </path>

    <!-- Modules -->


    <!-- Module ZenInitie -->

    <dirname property="module.zeninitie.basedir" file="${ant.file}"/>


    <property name="compiler.args.zeninitie" value="-encoding UTF-8 -source 8 -target 8 ${compiler.args}"/>

    <property name="zeninitie.output.dir" value="${module.zeninitie.basedir}/out/production/ZenInitie"/>
    <property name="zeninitie.testoutput.dir" value="${module.zeninitie.basedir}/out/test/ZenInitie"/>

    <property name="zeninitiedocs.docs.dir" value="${module.zeninitie.basedir}/ZenInitieDocs"/>

    <path id="zeninitie.module.bootclasspath">
        <!-- Paths to be included in compilation bootclasspath -->
    </path>

    <path id="zeninitie.module.production.classpath">
        <path refid="library.libs.classpath"/>
    </path>

    <path id="zeninitie.runtime.production.module.classpath">
        <pathelement location="${zeninitie.output.dir}"/>
        <path refid="library.libs.classpath"/>
    </path>

    <path id="zeninitie.module.classpath">
        <pathelement location="${zeninitie.output.dir}"/>
        <path refid="library.libs.classpath"/>
    </path>

    <path id="zeninitie.runtime.module.classpath">
        <pathelement location="${zeninitie.testoutput.dir}"/>
        <pathelement location="${zeninitie.output.dir}"/>
        <path refid="library.libs.classpath"/>
    </path>


    <patternset id="excluded.from.module.zeninitie">
        <patternset refid="ignored.files"/>
    </patternset>

    <patternset id="excluded.from.compilation.zeninitie">
        <patternset refid="excluded.from.module.zeninitie"/>
    </patternset>

    <path id="zeninitie.module.sourcepath">
        <dirset dir="${module.zeninitie.basedir}">
            <include name="src"/>
        </dirset>
    </path>


    <target name="compile.module.zeninitie" depends="compile.module.zeninitie.production,compile.module.zeninitie.tests"
            description="Compile module ZenInitie"/>

    <target name="compile.module.zeninitie.production" description="Compile module ZenInitie; production classes">
        <mkdir dir="${zeninitie.output.dir}"/>
        <javac includeantruntime="false" destdir="${zeninitie.output.dir}" debug="${compiler.debug}"
               nowarn="${compiler.generate.no.warnings}"
               memorymaximumsize="${compiler.max.memory}" fork="true">
            <compilerarg line="${compiler.args.zeninitie}"/>
            <bootclasspath refid="zeninitie.module.bootclasspath"/>
            <classpath refid="zeninitie.module.production.classpath"/>
            <src refid="zeninitie.module.sourcepath"/>
            <patternset refid="excluded.from.compilation.zeninitie"/>
        </javac>

        <copy todir="${zeninitie.output.dir}">
            <fileset dir="${module.zeninitie.basedir}/src">
                <patternset refid="compiler.resources"/>
                <type type="file"/>
            </fileset>
        </copy>
    </target>

    <target name="compile.module.zeninitie.tests" depends="compile.module.zeninitie.production"
            description="compile module ZenInitie; test classes" unless="skip.tests"/>

    <target name="clean.module.zeninitie" description="cleanup module">
        <delete dir="${zeninitie.output.dir}"/>
        <delete dir="${zeninitie.testoutput.dir}"/>
    </target>

    <target name="init" description="Build initialization">
        <!-- Perform any build initialization in this target -->
    </target>

    <target name="clean" depends="clean.module.zeninitie" description="cleanup all"/>

    <target name="build.modules" depends="init, clean, compile.module.zeninitie" description="build all modules"/>

    <target name="init.artifacts">
        <property name="artifacts.temp.dir" value="${basedir}/__artifacts_temp"/>
        <property name="artifact.output.zeninitie:jar" value="${basedir}/releases"/>
        <mkdir dir="${artifacts.temp.dir}"/>
        <property name="temp.jar.path.ZenInitie.jar" value="${artifacts.temp.dir}/ZenInitie.jar"/>
    </target>

    <target name="artifact.zeninitie:jar" depends="init.artifacts, compile.module.zeninitie"
            description="Build &#39;ZenInitie:jar&#39; artifact">
        <property name="artifact.temp.output.zeninitie:jar" value="${artifacts.temp.dir}/ZenInitie_jar"/>
        <mkdir dir="${artifact.temp.output.zeninitie:jar}"/>
        <jar destfile="${temp.jar.path.ZenInitie.jar}" duplicate="preserve" filesetmanifest="mergewithoutmain">
            <manifest>
                <attribute name="Main-Class" value="Main"/>
            </manifest>
            <zipfileset dir="${zeninitie.output.dir}"/>
            <zipfileset src="${basedir}/libs/darcula.jar"/>
            <zipfileset src="${basedir}/libs/kryonet-2.21-all.jar"/>
            <zipfileset src="${basedir}/libs/jlayer-1.0.1-2.jar"/>
            <zipfileset src="${basedir}/libs/tritonus-share-0.3.7-3.jar"/>
            <zipfileset src="${basedir}/libs/mp3spi-1.9.5-2.jar"/>
            <zipfileset src="${basedir}/libs/gson-2.8.6.jar"/>
        </jar>
        <copy file="${temp.jar.path.ZenInitie.jar}" tofile="${artifact.temp.output.zeninitie:jar}/ZenInitie.jar"/>
    </target>

    <target name="build.all.artifacts" depends="artifact.zeninitie:jar" description="Build all artifacts">
        <mkdir dir="${artifact.output.zeninitie:jar}"/>
        <copy todir="${artifact.output.zeninitie:jar}">
            <fileset dir="${artifact.temp.output.zeninitie:jar}"/>
        </copy>


        <!-- Delete temporary files -->
        <delete dir="${artifacts.temp.dir}"/>
    </target>

    <!-- Generate javadoc -->
    <target name="javadoc" depends="init" description="generate documentation">
        <javadoc sourcepath="${module.zeninitie.basedir}/src" destdir="${zeninitiedocs.docs.dir}/docs">
            <classpath>
                <fileset dir="${module.zeninitie.basedir}/src/">
                    <include name="*.java"/>
                </fileset>
                <fileset dir="${module.zeninitie.basedir}/libs">
                    <include name="*.jar"/>
                </fileset>
            </classpath>
        </javadoc>
    </target>

    <target name="all" depends="build.modules, build.all.artifacts, javadoc" description="build all"/>
</project>
